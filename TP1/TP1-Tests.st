TestCase subclass: #GestorTest	instanceVariableNames: 'gestor100 gestor200'	classVariableNames: ''	package: 'TP1-Tests'!!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:33'!test06BuscarLlamadaMasCostosaYBarataSinLlamadasYLuegoInternacionalDesdeGestorPlan200DebeLanzarExcepcion	| gestorPremium |	gestorPremium := GestorDeLlamadas conAbono: 200.		self should: [ gestorPremium obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self should: [ gestorPremium obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		gestorPremium realizarLlamadaInternacionalDurante: 12 EnElHorario: 14 Hacia: 'Chile'.	self shouldnt: [ gestorPremium obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self shouldnt: [ gestorPremium obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:31'!test03BuscarLlamadaMasCostosaYBarataSinLlamadasYLuegoLocalDesdeGestorPlan100DebeLanzarExcepcion	| gestorBasico |	gestorBasico := GestorDeLlamadas conAbono: 100.		self should: [ gestorBasico obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self should: [ gestorBasico obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		gestorBasico realizarLlamadaNacionalDurante: 12 EnElHorario: 14.	self shouldnt: [ gestorBasico obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self shouldnt: [ gestorBasico obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:23'!setUp	gestor100 := GestorDeLlamadas conAbono: 100.	gestor200 := GestorDeLlamadas conAbono: 200.! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:32'!test04BuscarLlamadaMasCostosaYBarataSinLlamadasYLuegoInternacionalDesdeGestorPlan100DebeLanzarExcepcion	| gestorBasico |	gestorBasico := GestorDeLlamadas conAbono: 100.		self should: [ gestorBasico obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self should: [ gestorBasico obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		gestorBasico realizarLlamadaInternacionalDurante: 12 EnElHorario: 14 Hacia: 'Chile'.	self shouldnt: [ gestorBasico obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self shouldnt: [ gestorBasico obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:33'!test05BuscarLlamadaMasCostosaYBarataSinLlamadasYLuegoLocalDesdeGestorPlan200DebeLanzarExcepcion	| gestorPremium |	gestorPremium := GestorDeLlamadas conAbono: 200.		self should: [ gestorPremium obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self should: [ gestorPremium obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		gestorPremium realizarLlamadaNacionalDurante: 12 EnElHorario: 14.	self shouldnt: [ gestorPremium obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	self shouldnt: [ gestorPremium obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.		! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:27'!test01AplicarTarifaDesdeGestor100DebeLanzarExcepcion	self should: [ gestor100 aplicarTarifaInternacionalGeneralParaTodosLosClientes: -1. ] raise: TarifaInternacionalInvalida.		self should: [ gestor100 aplicarTarifaInternacionalGeneralParaTodosLosClientes: 0. ] raise: TarifaInternacionalInvalida. 		self should: [ gestor100 aplicarTarifaInternacionalGeneralParaTodosLosClientes: nil. ] raise: TarifaInternacionalInvalida.		self should: [ gestor100 aplicarTarifaInternacionalGeneralParaTodosLosClientes: nil. ] raise: TarifaInternacionalInvalida.	! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:38'!test07RealizarLlamadasConDuracionesInvalidasLevantaExcepcion	self should: [ gestor100 realizarLlamadaNacionalDurante: -1 EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaNacionalDurante: -1 EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor100 realizarLlamadaInternacionalDurante: -1 EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaInternacionalDurante: -1 EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.		self should: [ gestor100 realizarLlamadaNacionalDurante: nil EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaNacionalDurante: nil EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor100 realizarLlamadaInternacionalDurante: nil EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaInternacionalDurante: nil EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.		self should: [ gestor100 realizarLlamadaNacionalDurante: 'abc' EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaNacionalDurante: 'abc' EnElHorario: 12 ] raise: MinutosInvalidos.	self should: [ gestor100 realizarLlamadaInternacionalDurante: 'abc' EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 'abc' EnElHorario: 12 Hacia: 'Chile' ] raise: MinutosInvalidos.! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:48'!test08RealizarLlamadasConHorariosInvalidosLevantaExcepcion	self should: [ gestor100 realizarLlamadaNacionalDurante: 10 EnElHorario: 100 ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaNacionalDurante: 10 EnElHorario: -1 ] raise: HorarioInvalido.	self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: 100 Hacia: 'Chile' ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: -1 Hacia: 'Chile' ] raise: HorarioInvalido.		self should: [ gestor100 realizarLlamadaNacionalDurante: 10 EnElHorario: nil ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaNacionalDurante: 10 EnElHorario: nil ] raise: HorarioInvalido.	self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: nil Hacia: 'Chile' ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: nil Hacia: 'Chile' ] raise: HorarioInvalido.		self should: [ gestor100 realizarLlamadaNacionalDurante: 10 EnElHorario: 'abc' ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaNacionalDurante: 10 EnElHorario: 'abc' ] raise: HorarioInvalido.	self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: 'abc' Hacia: 'Chile' ] raise: HorarioInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: 'abc' Hacia: 'Chile' ] raise: HorarioInvalido.! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 17:09'!test10LlamadasConDuracionesValidosNoLevantaExcepcion	self shouldnt: [ gestor100 realizarLlamadaNacionalDurante: 0 EnElHorario: 12 ] raise: DuracionExcedida.	self shouldnt: [ gestor200 realizarLlamadaNacionalDurante: 0 EnElHorario: 12 ] raise: DuracionExcedida.	self shouldnt: [ gestor100 realizarLlamadaInternacionalDurante: 0 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.	self shouldnt: [ gestor200 realizarLlamadaInternacionalDurante: 0 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.		self should: [ gestor100 realizarLlamadaNacionalDurante: 300 EnElHorario: 12 ] raise: DuracionExcedida.	self should: [ gestor200 realizarLlamadaNacionalDurante: 300 EnElHorario: 12 ] raise: DuracionExcedida.	self should: [ gestor100 realizarLlamadaInternacionalDurante: 300 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 300 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.		self shouldnt: [ gestor100 realizarLlamadaNacionalDurante: 299 EnElHorario: 12 ] raise: DuracionExcedida.	self shouldnt: [ gestor200 realizarLlamadaNacionalDurante: 299 EnElHorario: 12 ] raise: DuracionExcedida.	self shouldnt: [ gestor100 realizarLlamadaInternacionalDurante: 299 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.	self shouldnt: [ gestor200 realizarLlamadaInternacionalDurante: 299 EnElHorario: 12 Hacia: 'Chile' ] raise: DuracionExcedida.! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:27'!test02AplicarTarifaDesdeGestor200DebeLanzarExcepcion	self should: [ gestor200 aplicarTarifaInternacionalGeneralParaTodosLosClientes: -1. ] raise: TarifaInternacionalInvalida.		self should: [ gestor200 aplicarTarifaInternacionalGeneralParaTodosLosClientes: 0. ] raise: TarifaInternacionalInvalida. 		self should: [ gestor200 aplicarTarifaInternacionalGeneralParaTodosLosClientes: nil. ] raise: TarifaInternacionalInvalida.		self should: [ gestor200 aplicarTarifaInternacionalGeneralParaTodosLosClientes: nil. ] raise: TarifaInternacionalInvalida.	! !!GestorTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:51'!test09RealizarLlamadasInternacionalesConDestinosInvalidosLevantaExcepcion	self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: '' ] raise: DestinoInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: '' ] raise: DestinoInvalido.		self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: 123 ] raise: DestinoInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: 123 ] raise: DestinoInvalido.		self should: [ gestor100 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: nil ] raise: DestinoInvalido.	self should: [ gestor200 realizarLlamadaInternacionalDurante: 10 EnElHorario: 20 Hacia: nil ] raise: DestinoInvalido.! !TestCase subclass: #LlamadaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaTest methodsFor: 'running' stamp: 'EMC 4/25/2022 14:13'!test01CreoLlamadaInternacionalYVerificoSuPrecio	| llamada duracion hora pais tarifa |	tarifa := 1.	hora := 22.	pais := 'Paraguay'.	duracion := 10.	Internacional establecerTarifa: tarifa.	llamada := Internacional duracion: duracion Horario: hora Destino: pais MinutosCobrados: duracion.	self assert: (llamada calcularPrecio) identicalTo: (duracion * tarifa).	! !!LlamadaTest methodsFor: 'running' stamp: 'EMC 4/25/2022 14:13'!test02CreoLlamadaLocalYVerificoSuPrecio	| llamada duracion hora tarifaHorarioNoHabil |	tarifaHorarioNoHabil := 0.1.	hora := 22.	duracion := 10.	llamada := NoHabil duracion: duracion Horario: hora MinutosCobrados: duracion.		self assert: (llamada calcularPrecio) identicalTo: (duracion * tarifaHorarioNoHabil).	! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:42'!test08LlamadaInternacionalNoSeRealizaSiNoHayDestinoValido	self should: [ Internacional duracion: 10 Horario: 10 Destino: '' MinutosCobrados: 10 ] raise: DestinoInvalido.		self should: [ Internacional duracion: 10 Horario: 10 Destino: nil MinutosCobrados: 10 ] raise: DestinoInvalido.		self should: [ Internacional duracion: 10 Horario: 10 Destino: 1234 MinutosCobrados: 10 ] raise: DestinoInvalido.		! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:53'!test09LlamadaLocalDuracionInvalida	self should: [ Local duracion: -1 Horario: 10 MinutosCobrados: 10 ] raise: MinutosInvalidos.		self should: [ Local duracion: nil Horario: 10 MinutosCobrados: 10 ] raise: MinutosInvalidos.		self should: [ Local duracion: 'asd' Horario: 10 MinutosCobrados: 10 ] raise: MinutosInvalidos.		! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:19'!test06LlamadaNulaLocalHabilCobraUnMinuto	| llamada valorTarifa |	valorTarifa := 0.2.	llamada := Local duracion: 0 Horario: 14 MinutosCobrados: 0.		self assert: llamada calcularPrecio equals: valorTarifa. ! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:18'!test05LlamadaNulaLocalNoHabilCobraUnMinuto	| llamada valorTarifa |	valorTarifa := 0.1.	llamada := Local duracion: 0 Horario: 4 MinutosCobrados: 0.		self assert: llamada calcularPrecio equals: valorTarifa. ! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:19'!test07LlamadaNulaInternacionalCobraUnMinuto	| llamada valorTarifa |	valorTarifa := 2.	Internacional establecerTarifa: valorTarifa.	llamada := Internacional duracion: 0 Horario: 10 Destino: 'Paraguay' MinutosCobrados: 0.		self assert: llamada calcularPrecio equals: valorTarifa. ! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:56'!test12LlamadaInternacionalMontoACobrarInvalido	self should: [ Internacional duracion: 10 Horario: 10 Destino: 'Paraguay' MinutosCobrados: -1 ] raise: MinutosACobrarInvalidos.		self should: [ Internacional duracion: 10 Horario: 10 Destino: 'Paraguay' MinutosCobrados: nil ] raise: MinutosACobrarInvalidos.		self should: [ Internacional duracion: 10 Horario: 10 Destino: 'Paraguay' MinutosCobrados: 'abs' ] raise: MinutosACobrarInvalidos.		! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:13'!test04LlamadaInternacionalTieneTarifaoModificado	| llamada duracion hora pais |	duracion := 15.	hora := 20.	pais := 'Chile'.	llamada := Internacional duracion: duracion Horario: hora Destino: pais MinutosCobrados: duracion.	llamada establecerTarifaInternacional: 5.		self assert: (llamada calcularPrecio) equals: 15*5. ! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:58'!test11LlamadaInternacionalDuacionInvalida	self should: [ Internacional duracion: -1 Horario: 10 Destino: 'Paraguay' MinutosCobrados: 0] raise: MinutosInvalidos.		self should: [ Internacional duracion: nil Horario: 10 Destino: 'Paraguay' MinutosCobrados: 0 ] raise: MinutosInvalidos.		self should: [ Internacional duracion: 'abs' Horario: 10 Destino: 'Paraguay' MinutosCobrados: 0 ] raise: MinutosInvalidos.		! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:55'!test10LlamadaLocalMontoACobrarInvalido	self should: [ Local duracion: 10 Horario: 10 MinutosCobrados: -1 ] raise: MinutosACobrarInvalidos.		self should: [ Local duracion: 10 Horario: 10 MinutosCobrados: nil ] raise: MinutosACobrarInvalidos.		self should: [ Local duracion: 10 Horario: 10 MinutosCobrados: 'asd' ] raise: MinutosACobrarInvalidos.		! !!LlamadaTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 14:13'!test03LlamadaInternacionalTieneTarifaBase1	| llamada duracion hora pais |	duracion := 15.	hora := 20.	pais := 'Chile'.	llamada := Internacional duracion: duracion Horario: hora Destino: pais MinutosCobrados: duracion.		self assert: (llamada calcularPrecio) equals: 15. ! !TestCase subclass: #RegistroTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RegistroTests methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:04'!test01RegistroNoRecibeInstanciaDeLlamadaEnAgregarUnaLlamada	| registro gestor teleAlgo llamada |	registro := Registro new.	gestor := GestorDeLlamadas conAbono: 100.	teleAlgo := TeleAlgo conAbonoMensual: 200.	llamada := Local duracion: 10 Horario: 10 MinutosCobrados: 5. 		self should: [ registro agregarLlamada: 'abc' ] raise: RegistroSoloAceptaLlamadas.	self should: [ registro agregarLlamada: gestor ] raise: RegistroSoloAceptaLlamadas.	self should: [ registro agregarLlamada: teleAlgo ] raise: RegistroSoloAceptaLlamadas.	self shouldnt: [ registro agregarLlamada: llamada ] raise: RegistroSoloAceptaLlamadas.	! !!RegistroTests methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:23'!test02LlamadaMasCostosaSinLlamadasLevantaExcepcion	| registro |	registro := Registro new.		self should: [ registro obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.	registro agregarLlamada: (Local duracion: 10 Horario: 10 MinutosCobrados: 5).	self shouldnt: [ registro obtenerLlamadaMasCostosa ] raise: NoSeRealizaronLlamadas.! !!RegistroTests methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:23'!test03LlamadaMasBarataSinLlamadasLevantaExcepcion	| registro |	registro := Registro new.		self should: [ registro obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.	registro agregarLlamada: (Local duracion: 10 Horario: 10 MinutosCobrados: 5).	self shouldnt: [ registro obtenerLlamadaMasBarata ] raise: NoSeRealizaronLlamadas.! !!RegistroTests methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:24'!test04MontoTotalSinLlamadasDevuelve0	| registro |	registro := Registro new.		self assert: (registro obtenerMontoTotalEnLlamadas) equals: 0. ! !TestCase subclass: #TeleAlgoExcepcionesTest	instanceVariableNames: 'precision teleAlgoBasico teleAlgoPremium planNulo'	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoExcepcionesTest methodsFor: 'running' stamp: 'EMC 4/25/2022 15:13'!setUp	"Utilizados a partir del test número 16."	| abonoMasBasico abonoPremium |	abonoMasBasico := 100.	abonoPremium := 200.	teleAlgoBasico := TeleAlgo conAbonoMensual: abonoMasBasico.	teleAlgoPremium := TeleAlgo conAbonoMensual: abonoPremium.! !!TeleAlgoExcepcionesTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:14'!test01CreoPlanSinAbono	"Se comprueba que si el campo es invalido, el plan seleccionado entonces es como el mínimo."	| planInvalido planNulo |	planNulo := 0.	planInvalido := -110.		"No debería porque lo traté."	self shouldnt: [ TeleAlgo conAbonoMensual: planNulo ] raise: AbonoInvalido.	self assert: ((TeleAlgo conAbonoMensual: planNulo) calcularGastoFinal) equals: 100.		self shouldnt: [ TeleAlgo conAbonoMensual: planInvalido ] raise: AbonoInvalido.	self assert: ((TeleAlgo conAbonoMensual: planInvalido) calcularGastoFinal) equals: 100.		planInvalido := 123.	self shouldnt: [ TeleAlgo conAbonoMensual: planInvalido ] raise: AbonoInvalido.	self assert: ((TeleAlgo conAbonoMensual: planInvalido) calcularGastoFinal) equals: 100.! !!TeleAlgoExcepcionesTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:15'!test03ConsultoPorLlamadaMasBarataSinLlamadas	self assert: (teleAlgoBasico consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'. 	self assert: (teleAlgoPremium consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'.		teleAlgoBasico registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 21.	self deny: (teleAlgoBasico consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'. 	self assert: (teleAlgoPremium consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'.		teleAlgoPremium registrarLlamadaInternacionalCon: 21 HechaEnElHorario: 10 Hacia: 'Uruguay'.	self deny: (teleAlgoBasico consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'. 	self deny: (teleAlgoPremium consultarPorLlamadaEfectuadaMasBarata) equals: 'No se han realizado llamadas.'.! !!TeleAlgoExcepcionesTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 16:16'!test04ConsultoPorLlamadaMasCostosaSinLlamadas	self assert: (teleAlgoBasico consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'. 	self assert: (teleAlgoPremium consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'.		teleAlgoBasico registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 21.	self deny: (teleAlgoBasico consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'. 	self assert: (teleAlgoPremium consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'.		teleAlgoPremium registrarLlamadaInternacionalCon: 21 HechaEnElHorario: 10 Hacia: 'Uruguay'.	self deny: (teleAlgoBasico consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'. 	self deny: (teleAlgoPremium consultarPorLlamadaEfectuadaMasCostosa) equals: 'No se han realizado llamadas.'. ! !!TeleAlgoExcepcionesTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 15:17'!test02NoPuedoEstablecerTarifasInvalidas	"Se comprueba que si el campo es invalido, el plan seleccionado entonces es como el mínimo."	| tarifaNula tarifaNegativa tarifaInvalida |	tarifaNula := 0.	tarifaNegativa := -110.	tarifaInvalida := 'abc'.		self should: [ teleAlgoBasico aplicarTarifaPorMinutoALlamadaInternacional: tarifaNula ] raise: TarifaInternacionalInvalida.		self should: [ teleAlgoBasico aplicarTarifaPorMinutoALlamadaInternacional: tarifaNegativa ] raise: TarifaInternacionalInvalida.		self should: [ teleAlgoBasico aplicarTarifaPorMinutoALlamadaInternacional: tarifaInvalida ] raise: TarifaInternacionalInvalida.		tarifaNula := nil.	self should: [ teleAlgoBasico aplicarTarifaPorMinutoALlamadaInternacional: tarifaNula ] raise: TarifaInternacionalInvalida.! !!TeleAlgoExcepcionesTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 23:38'!test05IntentoAgregarUnGestorInvalido"Si bien el método es privado esta prueba la realizo para asegurarme que TeleAlgo siempre va a elegir un gestor propio de las clases hijas de GestorDeLlamadas."	| teleAlgo |	teleAlgo := TeleAlgo new.		self should: [ teleAlgo establecerGestor: nil ] raise: GestorInvalido.	self should: [ teleAlgo establecerGestor: (Local duracion: 100 Horario: 10 MinutosCobrados: 0) ] raise: GestorInvalido.	self shouldnt: [ teleAlgo establecerGestor: (GestorDeLlamadas conAbono: 100) ] raise: GestorInvalido.	 	 	! !TestCase subclass: #TeleAlgoTest	instanceVariableNames: 'precision teleAlgoBasico teleAlgoPremium'	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test5SeRegistraUnaLlamadaInternacionalYOtraNacionalEnHorarioHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 2.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test4SeRegistraUnaLlamadaInternacionalYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 110.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:26'!test11SeRealizanLlamadasInternacionalesConCambioDeTarifa	| teleAlgo abonoMensual primeraTanda segundaTanda |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	primeraTanda := 45.	segundaTanda := (15*4) + (20*4).	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaInternacionalCon: 25 HechaEnElHorario: 12 Hacia: 'Uruguay'.		self assert: (teleAlgo calcularGastoFinal) equals: primeraTanda + abonoMensual.		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 4.	teleAlgo registrarLlamadaInternacionalCon: 15 HechaEnElHorario: 14 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 14 Hacia: 'Chile'.		self assert: (teleAlgo calcularGastoFinal) equals: primeraTanda + abonoMensual + segundaTanda.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/3/2022 19:43'!test6SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Paraguay a las 24 hs durando 20 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:27'!test12SeRealizanLlamadasInternacionalesCon4CambiosDeTarifa	| teleAlgo abonoMensual primeraTanda segundaTanda terceraTanda cuartaTanda |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	primeraTanda := 10.	segundaTanda := 15*4.	terceraTanda := 25*3 + ((35*3)-(35*3*0.1)).	cuartaTanda := (40*5)-(40*5*0.1).	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self assert: (teleAlgo calcularGastoFinal) equals: abonoMensual + primeraTanda.		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 4.	teleAlgo registrarLlamadaInternacionalCon: 15 HechaEnElHorario: 14 Hacia: 'Paraguay'.	self assert: (teleAlgo calcularGastoFinal) equals: abonoMensual + primeraTanda + segundaTanda.		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 3.	teleAlgo registrarLlamadaInternacionalCon: 25 HechaEnElHorario: 14 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaInternacionalCon: 35 HechaEnElHorario: 20 Hacia: 'Canarias'.	self assert: (teleAlgo calcularGastoFinal) equals: abonoMensual + primeraTanda + segundaTanda + terceraTanda.		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 5.	teleAlgo registrarLlamadaInternacionalCon: 40 HechaEnElHorario: 8 Hacia: 'Brasil'.	self assert: (teleAlgo calcularGastoFinal) equals: abonoMensual + primeraTanda + segundaTanda + terceraTanda + cuartaTanda.		! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test7SeRegistraUnaLlamadaQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 103.6.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 24.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/25/2022 21:26'!test10SeRegistran10LlamadasYSeBuscaLaMasCostosa	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 15 HechaEnElHorario: 19.	teleAlgo registrarLlamadaNacionalConDuracion: 30 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 35 HechaEnElHorario: 1 Hacia: 'Uruguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 21.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 15.	teleAlgo registrarLlamadaInternacionalCon: 15 HechaEnElHorario: 14 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 15 HechaEnElHorario: 22.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Uruguay a las 1 hs durando 35 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/24/2022 18:07'!test13DosClientesNoTienenDistintasTarifasInternacionalesYSeActualizaALaUltimaDeclarada	| teleAlgo1 teleAlgo2 abonoMensual montoEsperado1 montoEsperado2 montoTotalPrimerTarifa montoTotalSegundaTarifa |	abonoMensual := 100.	teleAlgo1 := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo2 := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperado1 := (15*2) + abonoMensual.	montoEsperado2 := (20*2) + abonoMensual.	montoTotalPrimerTarifa := (15*1) + abonoMensual.	montoTotalSegundaTarifa := (20*5) + abonoMensual.		teleAlgo1 aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo2 aplicarTarifaPorMinutoALlamadaInternacional: 5.	teleAlgo1 aplicarTarifaPorMinutoALlamadaInternacional: 2.		teleAlgo1 registrarLlamadaInternacionalCon: 15 HechaEnElHorario: 4  Hacia: 'Guyana'.	teleAlgo2 registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 4  Hacia: 'Guyana'.		self assert: (teleAlgo1 calcularGastoFinal) equals: montoEsperado1.	self assert: (teleAlgo2 calcularGastoFinal) equals: montoEsperado2.		self deny: (teleAlgo1 calcularGastoFinal) equals: montoTotalPrimerTarifa.	self deny: (teleAlgo2 calcularGastoFinal) equals: montoTotalSegundaTarifa.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test1SeFacturanLasLlamadasDeUnUsuarioQueNoRealizoLlamadasDuranteElMesYPagaSoloElAbonoMensualFijo	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 100.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/23/2022 02:35'!test9SeRegistran10LlamadasYSeBuscaLaMasBarata	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 20 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 15 HechaEnElHorario: 19.	teleAlgo registrarLlamadaNacionalConDuracion: 30 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 35 HechaEnElHorario: 1 Hacia: 'Uruguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 21.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 15.	teleAlgo registrarLlamadaInternacionalCon: 15 HechaEnElHorario: 14 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 15 HechaEnElHorario: 22.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasBarata )		equals:		'La llamada mas barata: La llamada se hizo a destino local a las 21 hs durando 10 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/24/2022 18:42'!test15Abono200CobraLaMitadDeLosMinutosAPartirDeLos60HayDescuento	| teleAlgo abonoMensual montoEsperado |	abonoMensual := 200.		teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.		montoEsperado := (20*2/3) + (65/2*0.1) - (65/2*0.1 *0.1) + abonoMensual.	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.		teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 4  Hacia: 'Guyana'.		teleAlgo registrarLlamadaNacionalConDuracion: 65 HechaEnElHorario: 6.		self assert: (teleAlgo calcularGastoFinal) equals: montoEsperado.	! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test3SeRegistraUnaLlamadaNacionallYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 101.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario no habil es de 0,1 $"! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/24/2022 19:00'!test14DosClientesConAbonosDiferentesTienenGastosDistintos	| teleAlgo1 teleAlgo2 abonoMensual1 abonoMensual2 montoEsperado1 montoEsperado2 |	abonoMensual1 := 100.	abonoMensual2 := 200.		teleAlgo1 := TeleAlgo conAbonoMensual: abonoMensual1.	teleAlgo2 := TeleAlgo conAbonoMensual: abonoMensual2.		montoEsperado1 := (20*2) + (35*0.2) - (35*0.2*0.1) + abonoMensual1.	montoEsperado2 := (20*2*2/3) + ((35/2)*0.2) - ((35/2)*0.2*0.1) + abonoMensual2.	teleAlgo2 aplicarTarifaPorMinutoALlamadaInternacional: 2.		teleAlgo1 registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 4  Hacia: 'Guyana'.	teleAlgo2 registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 4  Hacia: 'Guyana'.		teleAlgo1 registrarLlamadaNacionalConDuracion: 35 HechaEnElHorario: 10.	teleAlgo2 registrarLlamadaNacionalConDuracion: 35 HechaEnElHorario: 10.		self assert: (teleAlgo1 calcularGastoFinal) equals: montoEsperado1.	self assert: (teleAlgo2 calcularGastoFinal) equals: montoEsperado2.	! !!TeleAlgoTest methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test2SeRegistraUnaLlamadaNacionalEnHoraHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 102. "El abono mas el costo de todas las llamadas"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	"El horario es un numero natural que va desde la hora 1 a la hora 24"	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario habil es de 0,2 $"	"El horario habil es de 8 a 20"! !!TeleAlgoTest methodsFor: 'tests' stamp: 'EMC 4/24/2022 03:56'!test8SeRegistranAlgunasLlamadasYSeBuscaLaMasBarata	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasBarata )		equals:		'La llamada mas barata: La llamada se hizo a destino local a las 22 hs durando 10 minutos'! !