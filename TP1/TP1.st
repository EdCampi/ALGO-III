Error subclass: #CampoInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CampoInvalido commentStamp: 'EMC 4/25/2022 21:34' prior: 0!Alertas de campos invalidos, avisan al usuario que este ingreso parámetros erroneos en los mensajes.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CampoInvalido class	instanceVariableNames: ''!!CampoInvalido class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:18'!comprobarDatosDeLlamadaDuracion: unosMinutos Horario: unaHora MinutosACobrar: unosMinutosACobrar"Comprueba que los datos a asociar a una llamada sean correctos. Lanza excepción en caso de encontrarse con un dato inválido."	HorarioInvalido comprobarHorario: unaHora.	MinutosInvalidos comprobarMinutos: unosMinutos.	DuracionExcedida comprobarDuracion: unosMinutos.	MinutosACobrarInvalidos comprobarMinutosACobrar: unosMinutosACobrar.! !CampoInvalido subclass: #AbonoInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!AbonoInvalido commentStamp: 'EMC 4/25/2022 21:35' prior: 0!Siendo 100 y 200 los únicos abonos permitidos, si el usuario desea dar de alta una línea con un abono mensual diferente, la excepción le avisará que no puede.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AbonoInvalido class	instanceVariableNames: ''!!AbonoInvalido class methodsFor: 'verification' stamp: 'EMC 4/26/2022 00:45'!comprobarAbono: unAbono"Revisa que el abono deseado sea solo uno de los disponibles."	(unAbono ~= 100 and: (unAbono ~= 200)) ifTrue: [ self signal. ].! !CampoInvalido subclass: #DestinoInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DestinoInvalido commentStamp: 'EMC 4/25/2022 21:37' prior: 0!Excepción creada con la finalidad de alertar sobre un destino de llamada inválido. Se considera inválido cualquier destino que contenga simbolos, numeros o no sean cadenas de texto.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DestinoInvalido class	instanceVariableNames: ''!!DestinoInvalido class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:27'!comprobarPaisValido: unPais"Comprueba que se trate de un país válido."	(unPais isString) ifFalse: [ self signal. ].	(unPais matchesRegex: '[a-zA-Z]+') ifTrue: [ ^ self. ].	self signal.! !Error subclass: #DuracionExcedida	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DuracionExcedida commentStamp: 'EMC 4/25/2022 21:33' prior: 0!Alerta al usuario cuando este realiza una llamada cuya duración es mayor a 300 minutos (5 hs).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DuracionExcedida class	instanceVariableNames: ''!!DuracionExcedida class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:29'!comprobarDuracion: unosMinutos"Comprueba que las llamadas no puedan tener duraciones infinitas, ni negativas."	(unosMinutos between: 0 and: 299) ifFalse: [ self signal. ].! !Object subclass: #GestorDeLlamadas	instanceVariableNames: 'registro abono'	classVariableNames: ''	package: 'TP1'!!GestorDeLlamadas commentStamp: 'EMC 4/23/2022 01:13' prior: 0!Gestor de llamadas, funciona como/para: - Realizar llamadas.- Puente entre la interfaz del operador, TeleAlgo, y el registro de llamadas.!!GestorDeLlamadas methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:16'!obtenerLlamadaMasCostosa"Devuelve la llamada más costosa presente en el registro."	^ registro obtenerLlamadaMasCostosa.! !!GestorDeLlamadas methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:17'!realizarLlamadaInternacionalDurante: unosMinutos EnElHorario: unaHora Hacia: unPais"Realiza una llamada local, agregándola al registro asociado a la línea."	self subclassResponsibility.! !!GestorDeLlamadas methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:17'!realizarLlamadaNacionalDurante: unosMinutos EnElHorario: unaHora"Realiza una llamada internacional, agregándola al registro asociado a la línea."	self subclassResponsibility. 	! !!GestorDeLlamadas methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:16'!obtenerLlamadaMasBarata"Devuelve la llamada más barata presente en el registro."	^ registro obtenerLlamadaMasBarata.! !!GestorDeLlamadas methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:15'!obtenerGastosTotales"Permite a la interfaz de TeleAlgo (y el usuario) disponer del monto total a pagar, en función de su abono y la duración de las llamadas emitidas por la línea."	^ abono + registro obtenerMontoTotalEnLlamadas.! !!GestorDeLlamadas methodsFor: 'setter' stamp: 'EMC 4/25/2022 23:13'!aplicarTarifaInternacionalGeneralParaTodosLosClientes: unaTarifa"El gestor se encarga de darle a todas las líneas la misma tarifa internacional, independientemente del plan al que estos estén suscritos."	Internacional establecerTarifa: unaTarifa.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorDeLlamadas class	instanceVariableNames: ''!!GestorDeLlamadas class methodsFor: 'initializing' stamp: 'EMC 4/26/2022 17:28'!conAbono: unAbono	| gestor |	AbonoInvalido comprobarAbono: unAbono.	gestor := GestorPlan100 new.	(unAbono = 200) ifTrue: [ gestor := GestorPlan200 new. ].	Internacional establecerTarifa: 1.	^ gestor.! !CampoInvalido subclass: #GestorInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!GestorInvalido commentStamp: 'EMC 4/25/2022 23:34' prior: 0!Verifica que el potencial gestor asignado a la instacia de TeleAlgo se trate efectivamente de un gestor válido.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorInvalido class	instanceVariableNames: ''!!GestorInvalido class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:33'!comprobarGestor: unGestor	(unGestor isKindOf: GestorDeLlamadas) ifFalse: [ self signal. ].	! !GestorDeLlamadas subclass: #GestorPlan100	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!GestorPlan100 commentStamp: 'EMC 4/24/2022 17:18' prior: 0!Gestor asignado a los planes de abono mensual de 100$.!!GestorPlan100 methodsFor: 'accessing' stamp: 'EMC 4/24/2022 18:55'!realizarLlamadaInternacionalDurante: unosMinutos EnElHorario: unaHora Hacia: unPais	registro agregarLlamada: (Internacional duracion: unosMinutos Horario: unaHora Destino: unPais MinutosCobrados: unosMinutos).! !!GestorPlan100 methodsFor: 'accessing' stamp: 'EMC 4/25/2022 14:04'!realizarLlamadaNacionalDurante: unosMinutos EnElHorario: unaHora	registro agregarLlamada: (Local duracion: unosMinutos Horario: unaHora MinutosCobrados: unosMinutos).! !!GestorPlan100 methodsFor: 'initialization' stamp: 'EMC 4/24/2022 18:20'!initialize	registro := Registro new.	abono := 100.! !GestorDeLlamadas subclass: #GestorPlan200	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!GestorPlan200 commentStamp: 'EMC 4/24/2022 17:18' prior: 0!Gestor asignado a los planes de abono mensual de 200$.!!GestorPlan200 methodsFor: 'accessing' stamp: 'EMC 4/25/2022 20:51'!realizarLlamadaInternacionalDurante: unosMinutos EnElHorario: unaHora Hacia: unPais	[ registro agregarLlamada: (Internacional duracion: unosMinutos Horario: unaHora Destino: unPais MinutosCobrados: (unosMinutos-(unosMinutos/3))) ] on: Exception do: [ :error |		(error isMemberOf: MessageNotUnderstood) ifTrue: [ MinutosInvalidos signal. ].		error signal.	]! !!GestorPlan200 methodsFor: 'accessing' stamp: 'EMC 4/25/2022 20:56'!realizarLlamadaNacionalDurante: unosMinutos EnElHorario: unaHora	[ registro agregarLlamada: (Local duracion: unosMinutos Horario: unaHora MinutosCobrados: ((unosMinutos/2))) ] on: Exception do: [ :error |		(error isMemberOf: MessageNotUnderstood) ifTrue: [ MinutosInvalidos signal. ].		error signal	]. 	! !!GestorPlan200 methodsFor: 'initialization' stamp: 'EMC 4/24/2022 18:20'!initialize	registro := Registro new.	abono := 200.! !CampoInvalido subclass: #HorarioInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!HorarioInvalido commentStamp: 'EMC 4/25/2022 21:38' prior: 0!Dado el formato de 24 hs, si se agrega un número fuera del límite 1-24 hs se alertará al usuario y no se podrá realizar la llamada.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HorarioInvalido class	instanceVariableNames: ''!!HorarioInvalido class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:27'!comprobarHorario: unaHora"Comprueba que el horario ingresado sea válido según el formato asignado a la clase TeleAlgo, 24 hs."	(unaHora isNumber) ifFalse: [ ^ self signal. ].	(unaHora between: 1 and: 24) ifFalse: [ ^ self signal. ].! !Object subclass: #Llamada	instanceVariableNames: 'duracion horario destino tarifa minutosAPagar'	classVariableNames: ''	package: 'TP1'!!Llamada commentStamp: 'EMC 4/23/2022 01:34' prior: 0!Clase Llamada, clase padre y abstracta, que guarda los métodos comunes de ambos tipos de llamadas, locales e internacionales.Cada llamada es capaz de:- Calcular su precio en función de su tipo y duración (generando inicialmente un precio base de la misma).- Generar una descripcion legible de la llamada.!!Llamada methodsFor: 'abstract' stamp: 'EMC 4/25/2022 23:07'!calcularPrecio"Devuelve el precio de cada llamada."	self subclassResponsibility.! !!Llamada methodsFor: 'abstract' stamp: 'EMC 4/25/2022 23:08'!descripcion"Devuelve una cadena de texto con una descripción breve acerca de la llamada."	self subclassResponsibility.! !!Llamada methodsFor: 'private' stamp: 'EMC 4/25/2022 23:08'!establecerHorario: unaHora"Establece el horario de emisión de la llamada."	horario := unaHora.! !!Llamada methodsFor: 'private' stamp: 'EMC 4/25/2022 23:09'!aplicarTarifaBaseEnLlamada"Todas las llamadas independientemente de ser locales e internacionales se calculan en función de los minutos a pagar, la tarifa asignada al tipo de llamada y un posible descuento por duración. Si la duración de llamada es nula (!!= minutos a cobrar) solo se cobra el valor correspondiente a 1 minuto."	| precioAuxiliar |	(duracion < 1) ifTrue: [ minutosAPagar := 1 ].	precioAuxiliar := minutosAPagar * tarifa.	(duracion > 30) ifTrue: [ precioAuxiliar := precioAuxiliar - (precioAuxiliar*0.1). ].	^ precioAuxiliar. ! !!Llamada methodsFor: 'private' stamp: 'EMC 4/25/2022 23:09'!establecerMinutosCobrados: unosMinutosACobrar"Declara la cantidad de minutos a ser cobrados."	minutosAPagar := unosMinutosACobrar.! !!Llamada methodsFor: 'private' stamp: 'EMC 4/25/2022 23:08'!establecerDuracion: unosMinutos"Declara la duración de la llamada."	duracion := unosMinutos.! !Llamada subclass: #Internacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Internacional commentStamp: 'EMC 4/23/2022 01:36' prior: 0!Llamada de tipo internacional, a diferencia de las llamadas locales, posee una tarifa diferente a la default (si esta no se declara previo a su instanciacion, su valor por defecto será 1$), no varía con el horario hábil, y posee un destino diferente al por defecto de las llamadas locales.!!Internacional methodsFor: 'accessing' stamp: 'EMC 4/23/2022 00:18'!calcularPrecio	^ self aplicarTarifaBaseEnLlamada.! !!Internacional methodsFor: 'abstract' stamp: 'EMC 4/25/2022 23:08'!descripcion	^ 'La llamada se hizo a ', destino, ' a las ', horario asString, ' hs durando ', duracion asString, ' minutos'.! !!Internacional methodsFor: 'private' stamp: 'EMC 4/25/2022 23:05'!establecerDestino: unPais"Le asigna a la llamada un destino."	destino := unPais.! !!Internacional methodsFor: 'private' stamp: 'EMC 4/25/2022 23:06'!establecerTarifaInternacional: unaTarifa"Guarda la tarifa propia a la llamada."	tarifa := unaTarifa.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Internacional class	instanceVariableNames: 'tarifaExtranjera'!!Internacional class methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:03'!establecerTarifa: unaTarifa"Este método de instancia permite que todos los clientes de TeleAlgo instanciados al mismo tiempo compartan la tarifa internacional."	TarifaInternacionalInvalida verificar: unaTarifa.	tarifaExtranjera := unaTarifa.! !!Internacional class methodsFor: 'initializing' stamp: 'EMC 4/25/2022 23:11'!duracion: unosMinutos Horario: unaHora Destino: unPais MinutosCobrados: unosMinutosACobrar"Pseudo-constructor de la clase Internacional, donde la llamada posee un destino diferente al local y una tarifa diferente."	| llamada |	CampoInvalido comprobarDatosDeLlamadaDuracion: unosMinutos Horario: unaHora MinutosACobrar: unosMinutosACobrar.	DestinoInvalido comprobarPaisValido: unPais.		llamada := self new.	llamada establecerHorario: unaHora.	llamada establecerDestino: unPais.	llamada establecerDuracion: unosMinutos.	llamada establecerMinutosCobrados: unosMinutosACobrar.	llamada establecerTarifaInternacional: tarifaExtranjera.	^ llamada.! !Llamada subclass: #Local	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Local commentStamp: 'EMC 4/22/2022 23:39' prior: 0!Llamada de tipo local, la misma maneja su precio en función del horario, su destino por defecto (una invariable del objeto) es el país de emisión.!!Local methodsFor: 'abstract' stamp: 'EMC 4/23/2022 01:25'!descripcion	^ 'La llamada se hizo a destino local a las ', horario asString, ' hs durando ', duracion asString, ' minutos'.! !!Local methodsFor: 'initialization' stamp: 'EMC 4/23/2022 00:53'!initialize	tarifa := 0.1. 	destino := 'Argentina'.! !!Local methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:00'!calcularPrecio	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Local class	instanceVariableNames: ''!!Local class methodsFor: 'initializing' stamp: 'EMC 4/25/2022 23:11'!duracion: unosMinutos Horario: unaHora MinutosCobrados: unosMinutosACobrar"Especie de constructor de la clase llamada, devuelve la instacia correcta según el horario de emisión de la llamada."	| llamada |	CampoInvalido comprobarDatosDeLlamadaDuracion: unosMinutos Horario: unaHora MinutosACobrar: unosMinutosACobrar. 		llamada := NoHabil new.	(unaHora between: 8 and: 20) ifTrue: [ llamada := Habil new. ].	llamada establecerHorario: unaHora.	llamada establecerDuracion: unosMinutos.	llamada establecerMinutosCobrados: unosMinutosACobrar.	^ llamada.! !Local subclass: #Habil	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Habil commentStamp: 'EMC 4/24/2022 01:00' prior: 0!Tipo de llamada local que encuentra su precio duplicado y es generada entre las 7 a las 20 hs.!!Habil methodsFor: 'accessing' stamp: 'EMC 4/25/2022 23:01'!calcularPrecio"La llamada de tipo Habil (hecha durante el horario hábil), encuentra su tarifa duplicada, siendo esta de $0.2 cada minuto."	^ self aplicarTarifaBaseEnLlamada * 2.! !CampoInvalido subclass: #MinutosACobrarInvalidos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!MinutosACobrarInvalidos commentStamp: 'EMC 4/25/2022 21:40' prior: 0!Alerta de uso inválido de los minutos a cobrar.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MinutosACobrarInvalidos class	instanceVariableNames: ''!!MinutosACobrarInvalidos class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:28'!comprobarMinutosACobrar: unosMinutosACobrar"Comprueba que los minutos a cobrar sean válidos."	(unosMinutosACobrar isNumber) ifFalse: [ ^ self signal. ].	(unosMinutosACobrar < 0) ifTrue: [ ^ self signal. ].! !CampoInvalido subclass: #MinutosInvalidos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!MinutosInvalidos commentStamp: 'EMC 4/25/2022 21:40' prior: 0!Alerta sobre una duración de llamada inválida.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MinutosInvalidos class	instanceVariableNames: ''!!MinutosInvalidos class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:28'!comprobarMinutos: unosMinutos"Comprueba que el parámetro sea efectivamente un número válido."	(unosMinutos isNumber) ifFalse: [ self signal. ].	(unosMinutos < 0) ifTrue: [ self signal. ]! !Local subclass: #NoHabil	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!NoHabil commentStamp: 'EMC 4/24/2022 01:12' prior: 0!Tipo de llamada generada entre fuera del rango horario 8-20 hs cuyo precio es el original, 0.1.!!NoHabil methodsFor: 'accessing' stamp: 'EMC 4/25/2022 22:59'!calcularPrecio	^ self aplicarTarifaBaseEnLlamada.! !Error subclass: #NoSeRealizaronLlamadas	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!NoSeRealizaronLlamadas commentStamp: 'EMC 4/25/2022 21:31' prior: 0!Alerta al usuario cuando se intenta realizar alguna consulta (fuera del operador) sin haber hecho llamadas previamente.!Object subclass: #Registro	instanceVariableNames: 'historialDeLlamadas'	classVariableNames: ''	package: 'TP1'!!Registro commentStamp: 'EMC 4/23/2022 01:05' prior: 0!Clase Registro, funciona como un historial de llamadas cuyas funciones son:- Guardar el historial de llamadas.- Obtener el total del costo de todas las llamadas.- Obtener la llamada más barata y más costosa.!!Registro methodsFor: 'initialization' stamp: 'EMC 4/22/2022 23:31'!initialize	historialDeLlamadas := OrderedCollection new.! !!Registro methodsFor: 'accessing' stamp: 'EMC 4/25/2022 22:56'!obtenerLlamadaMasBarata"Permite al ususario obtener la llamada más barata del historial."	| llamadaMasBarata |	[ llamadaMasBarata := historialDeLlamadas at: 1. ] on: SubscriptOutOfBounds do: [ NoSeRealizaronLlamadas signal. ].	historialDeLlamadas do: [ :llamada |		((llamada calcularPrecio) < llamadaMasBarata calcularPrecio) ifTrue: [ llamadaMasBarata := llamada ].	].	^ llamadaMasBarata.! !!Registro methodsFor: 'accessing' stamp: 'EMC 4/25/2022 22:57'!obtenerMontoTotalEnLlamadas"Recorre el historial devolviendo la sumatoria del precio de cada llamada."	| montoTotalLlamadas |	montoTotalLlamadas := 0.	historialDeLlamadas do: [ :llamada |		montoTotalLlamadas := montoTotalLlamadas + (llamada calcularPrecio).	].	^ montoTotalLlamadas.	! !!Registro methodsFor: 'accessing' stamp: 'EMC 4/25/2022 22:56'!obtenerLlamadaMasCostosa"Permite al ususario obtener la llamada más costosa del historial."	| llamadaMasCostosa |	[ llamadaMasCostosa := historialDeLlamadas at: 1. ] on: SubscriptOutOfBounds do: [ NoSeRealizaronLlamadas signal. ].	historialDeLlamadas do: [ :llamada |		((llamada calcularPrecio) > llamadaMasCostosa calcularPrecio) ifTrue: [ llamadaMasCostosa := llamada ].	].	^ llamadaMasCostosa.! !!Registro methodsFor: 'adding' stamp: 'EMC 4/26/2022 00:23'!agregarLlamada: unaLlamada"Agrega una llamada al historial."	RegistroSoloAceptaLlamadas comprobarLlamada: unaLlamada.	historialDeLlamadas add: unaLlamada.! !Error subclass: #RegistroSoloAceptaLlamadas	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!RegistroSoloAceptaLlamadas commentStamp: 'EMC 4/25/2022 21:31' prior: 0!Excepción que alerta al ususario sobre un intento erroneo de agregar algún objeto diferente a una llamada dentro del registro.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RegistroSoloAceptaLlamadas class	instanceVariableNames: ''!!RegistroSoloAceptaLlamadas class methodsFor: 'verification' stamp: 'EMC 4/25/2022 22:55'!comprobarLlamada: unaLlamada"Comprueba si el parámetro se trata de una llamada o no. Levanta una excepción en caso contrario."	(unaLlamada isKindOf: Llamada) ifFalse: [ self signal. ].! !CampoInvalido subclass: #TarifaInternacionalInvalida	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!TarifaInternacionalInvalida commentStamp: 'EMC 4/25/2022 21:41' prior: 0!No se pueden colocar tarifas negativas, ni nulas para llamadas internacionales.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TarifaInternacionalInvalida class	instanceVariableNames: ''!!TarifaInternacionalInvalida class methodsFor: 'verification' stamp: 'EMC 4/25/2022 23:29'!verificar: unaTarifa"Verifica que la tarifa que se busca asignar sea correcta (un número y no nula)."	(unaTarifa isNumber) ifFalse: [ ^ self signal. ].	(unaTarifa <= 0) ifTrue: [ ^ self signal. ].! !Object subclass: #TeleAlgo	instanceVariableNames: 'gestor'	classVariableNames: ''	package: 'TP1'!!TeleAlgo commentStamp: 'EMC 4/22/2022 20:47' prior: 0!Clase principal del modelo, representa una operadora móvil.Responsabilidades del objeto:- Ser la interfaz de uso para el usuario.- Presentar los datos consultados en forma clara y legible.!!TeleAlgo methodsFor: 'adding' stamp: 'EMC 4/25/2022 21:58'!registrarLlamadaNacionalConDuracion: unosMinutos HechaEnElHorario: unaHora"Permite registrar llamdas locales en la línea seleccionada."	gestor realizarLlamadaNacionalDurante: unosMinutos EnElHorario: unaHora.! !!TeleAlgo methodsFor: 'adding' stamp: 'EMC 4/25/2022 21:58'!registrarLlamadaInternacionalCon: unosMinutos HechaEnElHorario: unaHora Hacia: unPais"Permite registrar llamdas con destino internacional en la línea seleccionada."	gestor realizarLlamadaInternacionalDurante: unosMinutos EnElHorario: unaHora Hacia: unPais.! !!TeleAlgo methodsFor: 'initialization' stamp: 'EMC 4/22/2022 21:03'!initialize	gestor := GestorDeLlamadas new.! !!TeleAlgo methodsFor: 'setter' stamp: 'EMC 4/25/2022 21:55'!aplicarTarifaPorMinutoALlamadaInternacional: unaTarifa"Modifica la tarifa inicial de $1 aplicada a el minuto de las llamadas internacionales."	gestor aplicarTarifaInternacionalGeneralParaTodosLosClientes: unaTarifa.! !!TeleAlgo methodsFor: 'accessing' stamp: 'EMC 4/25/2022 21:57'!consultarPorLlamadaEfectuadaMasCostosa"Provee una descripción legible para el usuario  final de la llamada más costosa realizada con la línea utilizada."	| llamadaMasCostosa |	[ llamadaMasCostosa := gestor obtenerLlamadaMasCostosa. ] on: NoSeRealizaronLlamadas do: [		^ 'No se han realizado llamadas.'	].	^ 'La llamada mas costosa: ' , llamadaMasCostosa descripcion.! !!TeleAlgo methodsFor: 'accessing' stamp: 'EMC 4/25/2022 21:57'!consultarPorLlamadaEfectuadaMasBarata"Provee una descripción legible para el usuario  final de la llamada más barata realizada con la línea utilizada."	| llamadaMasBarata |	[ llamadaMasBarata  := gestor obtenerLlamadaMasBarata. ] on: NoSeRealizaronLlamadas do: [		^ 'No se han realizado llamadas.'	].	^ 'La llamada mas barata: ', llamadaMasBarata descripcion.	! !!TeleAlgo methodsFor: 'accessing' stamp: 'EMC 4/25/2022 21:56'!calcularGastoFinal"Devuelve el total a pagar en la línea."	^ gestor obtenerGastosTotales.! !!TeleAlgo methodsFor: 'private' stamp: 'EMC 4/25/2022 23:34'!establecerGestor: unGestor"Establece un gestor para la línea."	GestorInvalido comprobarGestor: unGestor.	gestor := unGestor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TeleAlgo class	instanceVariableNames: ''!!TeleAlgo class methodsFor: 'initializing' stamp: 'EMC 4/25/2022 21:53'!conAbonoMensual: unAbono	"Crea la instacia de TeleAlgo con el gestor correcto en función al abono seleccionado."	| operador abonoMasBasico |	abonoMasBasico := 100.	operador := self new.		[ operador establecerGestor: (GestorDeLlamadas conAbono: unAbono). ] on: AbonoInvalido do: [		operador establecerGestor: (GestorDeLlamadas conAbono: abonoMasBasico).	].	^ operador.! !